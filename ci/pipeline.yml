---
jobs:
- name: test-cdn-broker
  plan:
  - get: broker-src
    trigger: true
  - task: run-tests
    file: broker-src/ci/run-tests.yml

- name: push-cf-cdn-service-broker-staging
  plan:
  - aggregate:
    - get: broker-src
      passed: [test-cdn-broker]
      trigger: true
    - get: pipeline-tasks
  - task: create-db
    file: broker-src/ci/create-db.yml
    params:
      # Note: Name must match service name in manifest
      SERVICE_TYPE: aws-rds
      SERVICE_NAME: rds-cdn-broker
      SERVICE_PLAN: shared-psql
      <<: *cf-creds-staging
  - aggregate:
    - put: broker-deploy-staging
      params:
        path: broker-src
        manifest: broker-src/manifest-broker.yml
        environment_variables: &cfenv-staging
          BROKER_USERNAME: {{cdn-broker-user-staging}}
          BROKER_PASSWORD: {{cdn-broker-pass-staging}}
          AWS_ACCESS_KEY_ID: {{cdn-broker-access-key-id-staging}}
          AWS_SECRET_ACCESS_KEY: {{cdn-broker-secret-access-key-staging}}
          AWS_DEFAULT_REGION: {{cdn-broker-region-staging}}
          SERVER_SIDE_ENCRYPTION: AES256
          API_ADDRESS: {{cf-api-url-staging}}
          CLIENT_ID: {{cdn-broker-client-id-staging}}
          CLIENT_SECRET: {{cdn-broker-client-secret-staging}}
          DEFAULT_ORIGIN: {{cdn-broker-default-origin-staging}}
    - put: broker-deploy-staging
      params:
        path: broker-src
        manifest: broker-src/manifest-cron.yml
        environment_variables: *cfenv-staging
  - task: update-broker
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-creds-staging
      BROKER_NAME: cdn-broker
      AUTH_USER: {{cdn-broker-user-staging}}
      AUTH_PASS: {{cdn-broker-pass-staging}}
      SERVICES: cdn-route
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy cf-cdn-service-broker on {{cf-api-url-staging}}
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed cf-cdn-service-broker on {{cf-api-url-staging}}
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: acceptance-tests-staging
  serial: true
  plan:
  - get: broker-src
    passed: [push-cf-cdn-service-broker-staging]
    trigger: true
  - aggregate:
    - task: acceptance-tests-http-01
      file: broker-src/ci/acceptance-tests.yml
      params: &acceptance-tests-params-staging
        <<: *cf-creds-staging
        SERVICE_NAME: cdn-route
        PLAN_NAME: cdn-route
        SERVICE_INSTANCE_NAME: cdn-acceptance-test-%s
        CHALLENGE_TYPE: HTTP-01
        AWS_ACCESS_KEY_ID: {{cdn-broker-access-key-id-staging}}
        AWS_SECRET_ACCESS_KEY: {{cdn-broker-secret-access-key-staging}}
        HOSTED_ZONE_ID: {{hosted-zone-id-staging}}
        DOMAIN: {{domain-url-staging}}
        CDN_TIMEOUT: {{cdn-timeout}}
    - task: acceptance-tests-dns-01
      file: broker-src/ci/acceptance-tests.yml
      params:
        <<: *acceptance-tests-params-staging
        CHALLENGE_TYPE: DNS-01

- name: push-cf-cdn-service-broker-production
  plan:
  - aggregate:
    - get: broker-src
      passed: [acceptance-tests-staging]
      trigger: true
    - get: pipeline-tasks
  - task: create-db
    file: broker-src/ci/create-db.yml
    params:
      # Note: Name must match service name in manifest
      SERVICE_TYPE: aws-rds
      SERVICE_NAME: rds-cdn-broker
      SERVICE_PLAN: shared-psql
      <<: *cf-creds-production
  - aggregate:
    - put: broker-deploy-production
      params:
        path: broker-src
        manifest: broker-src/manifest-broker.yml
        environment_variables: &cfenv-production
          BROKER_USERNAME: {{cdn-broker-user-production}}
          BROKER_PASSWORD: {{cdn-broker-pass-production}}
          AWS_ACCESS_KEY_ID: {{cdn-broker-access-key-id-production}}
          AWS_SECRET_ACCESS_KEY: {{cdn-broker-secret-access-key-production}}
          AWS_DEFAULT_REGION: {{cdn-broker-region-production}}
          SERVER_SIDE_ENCRYPTION: AES256
          API_ADDRESS: {{cf-api-url-production}}
          CLIENT_ID: {{cdn-broker-client-id-production}}
          CLIENT_SECRET: {{cdn-broker-client-secret-production}}
          DEFAULT_ORIGIN: {{cdn-broker-default-origin-production}}
    - put: broker-deploy-production
      params:
        path: broker-src
        manifest: broker-src/manifest-cron.yml
        environment_variables: *cfenv-production
  - task: update-broker
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-creds-production
      BROKER_NAME: cdn-broker
      AUTH_USER: {{cdn-broker-user-production}}
      AUTH_PASS: {{cdn-broker-pass-production}}
      SERVICES: cdn-route
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy cf-cdn-service-broker on {{cf-api-url-production}}
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed cf-cdn-service-broker on {{cf-api-url-production}}
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: acceptance-tests-production
  serial: true
  plan:
  - get: broker-src
    passed: [push-cf-cdn-service-broker-production]
    trigger: true
  - aggregate:
    - task: acceptance-tests-http-01
      file: broker-src/ci/acceptance-tests.yml
      params: &acceptance-tests-params-production
        <<: *cf-creds-production
        SERVICE_NAME: cdn-route
        PLAN_NAME: cdn-route
        SERVICE_INSTANCE_NAME: cdn-acceptance-test-%s
        CHALLENGE_TYPE: HTTP-01
        AWS_ACCESS_KEY_ID: {{cdn-broker-access-key-id-production}}
        AWS_SECRET_ACCESS_KEY: {{cdn-broker-secret-access-key-production}}
        HOSTED_ZONE_ID: {{hosted-zone-id-production}}
        DOMAIN: {{domain-url-production}}
        CDN_TIMEOUT: {{cdn-timeout}}
    - task: acceptance-tests-dns-01
      file: broker-src/ci/acceptance-tests.yml
      params:
        <<: *acceptance-tests-params-production
        CHALLENGE_TYPE: DNS-01

resources:
- name: broker-src
  type: git
  source:
    uri: {{cf-cdn-broker-git-url}}
    branch: {{cf-cdn-broker-git-branch}}

- name: pipeline-tasks
  type: git
  source:
    uri: {{pipeline-tasks-git-url}}
    branch: {{pipeline-tasks-git-branch}}

- name: broker-deploy-staging
  type: cf
  source:
    api: {{cf-api-url-staging}}
    username: {{cf-deploy-username-staging}}
    password: {{cf-deploy-password-staging}}
    organization: {{cf-organization-staging}}
    space: {{cf-space-staging}}

- name: broker-deploy-production
  type: cf
  source:
    api: {{cf-api-url-production}}
    username: {{cf-deploy-username-production}}
    password: {{cf-deploy-password-production}}
    organization: {{cf-organization-production}}
    space: {{cf-space-production}}

- name: slack
  type: slack-notification
  source:
    url: {{slack-webhook-url}}

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

meta:
  cf-creds-staging: &cf-creds-staging
    CF_API_URL: {{cf-api-url-staging}}
    CF_USERNAME: {{cf-deploy-username-staging}}
    CF_PASSWORD: {{cf-deploy-password-staging}}
    CF_ORGANIZATION: {{cf-organization-staging}}
    CF_SPACE: {{cf-space-staging}}
  cf-creds-production: &cf-creds-production
    CF_API_URL: {{cf-api-url-production}}
    CF_USERNAME: {{cf-deploy-username-production}}
    CF_PASSWORD: {{cf-deploy-password-production}}
    CF_ORGANIZATION: {{cf-organization-production}}
    CF_SPACE: {{cf-space-production}}
